üß∞ Script: audit.ps1


üéØ Purpose:
The audit.ps1 script performs local security audits on a Windows system. It checks for weak configurations, collects system status info, and reports findings in a readable format (CSV or Markdown).

This script will:
> Help validate system security posture
> Identify gaps against baselines (CIS, NIST 800-53, etc.)
> Provide evidence for compliance or audit purposes

‚úÖ First 5 Security Checks (with GRC Relevance)

We‚Äôll begin with 5 foundational, high-value checks that:
> Are easy to gather using PowerShell
> Map directly to key NIST controls
> Set you up for both technical and GRC credibility

I will jump right in!!!


üîç Check #1: Windows Firewall Status

üéØ Goal:
Audit whether the Windows Defender Firewall is enabled for all network profiles: Domain, Private, and Public.

Output the results to console and optionally to a report (we‚Äôll add export logic later).

üîê GRC Control Mapping:
NIST 800-53: SC-7 ‚Äì Boundary Protection

CIS Control: Control 9 ‚Äì Limitation and Control of Network Ports, Protocols, and Services


Heres what the first Script block will look like:

# ============================
# Windows Hardening Toolkit
# audit.ps1 ‚Äì Firewall Status Check
# ============================

Write-Host "`n[+] Checking Windows Firewall Status..." -ForegroundColor Cyan

# Retrieve firewall status for all profiles
$firewallProfiles = Get-NetFirewallProfile | Select-Object Name, Enabled

# Loop through profiles and display results
foreach ($profile in $firewallProfiles) {
    $status = if ($profile.Enabled) { "ENABLED" } else { "DISABLED" }
    $color = if ($profile.Enabled) { "Green" } else { "Red" }

    Write-Host " - $($profile.Name) Profile: $status" -ForegroundColor $color
}

# Optional: Add to results object for later export
$global:auditResults += foreach ($profile in $firewallProfiles) {
    [PSCustomObject]@{
        Check        = "Firewall Status"
        Profile      = $profile.Name
        Status       = if ($profile.Enabled) { "ENABLED" } else { "DISABLED" }
        ControlID    = "SC-7"
        Description  = "Windows Firewall should be enabled for all profiles."
    }
}

What does this script ACTUALLY mean?

| Line                      | What It Does                                                   |
| ------------------------- | -------------------------------------------------------------- |
| `Get-NetFirewallProfile`  | Pulls current firewall config for Domain/Private/Public        |
| Loop + `Write-Host`       | Outputs status in color: ‚úÖ green if enabled, ‚ùå red if disabled |
| `$global:auditResults +=` | Collects results in an array for **reporting/export** later    |
| ControlID                 | Ties each check to a GRC control (starting with **SC-7**)      |


This is important because this script is a GRC guided move. I have to understand what matters technically, adn what supports audit, compliance, or documentation. Heres a more indpeth breakdown of what is going on.

| Section                                                           | What It Does                                                | GRC Value?                                                         | Critical to the Script?               |            |
| ----------------------------------------------------------------- | ----------------------------------------------------------- | ------------------------------------------------------------------ | ------------------------------------- | ---------- |
| `# ============================ # Windows Hardening Toolkit` | **Comment headers** to organize the script visually         | ‚ùå No GRC value                                                     | ‚ùå Not required                        |            |
| `Write-Host "`n\[+] Checking Windows Firewall Status..."\`        | Prints a heading to the screen in cyan                      | üü° Nice for audit readability                                      | ‚ùå Not critical                        |            |
| \`\$firewallProfiles = Get-NetFirewallProfile                     | Select-Object Name, Enabled\`                               | **Core logic** ‚Äì grabs firewall settings for Domain/Private/Public | ‚úÖ GRC relevant                        | ‚úÖ Required |
| `foreach (...) { $status = ... }`                                 | Loops through each profile, checks if enabled               | ‚úÖ Used to confirm compliance                                       | ‚úÖ Required                            |            |
| `Write-Host ... -ForegroundColor`                                 | Prints the result in green/red                              | üü° Helps visually during manual audits                             | ‚ùå Not needed for automation           |            |
| `$global:auditResults += ...`                                     | Adds the result to a list for exporting to CSV/report later | ‚úÖ Makes audit trail/exportable                                     | ‚úÖ Optional but useful                 |            |
| `ControlID = "SC-7"`                                              | GRC mapping to **NIST 800-53**                              | ‚úÖ Required for compliance                                          | ‚úÖ Required if you're showing mappings |            |










